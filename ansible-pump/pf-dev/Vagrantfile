# -*- mode: ruby -*-
# vi: set ft=ruby :

# Note that this requires the vagrant-disksize plugin to be installed
# https://github.com/sprotheroe/vagrant-disksize
# vagrant plugin install vagrant-disksize

# Name of development environment
# DEV_ENV = "dev.cnect.to"

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  # AMONIS: 12/01/2018: Config for VirtualBox
  # config.vm.box = "ubuntu/xenial64"
  # AMONIS: 12/01/2018: Config for Parallels, Xenial is not supported apparently?
  config.vm.box = "bento/ubuntu-16.04"

  # JCARNEY 3/6/19: Install multiple VMs (we can use multiple Pumphouses). See tutorial: https://www.youtube.com/watch?v=BKik_KaaUzE
  # config.vm.define "vmtwo" do |vmtwo|
  #  vmtwo.vm.box = "bento/ubuntu-16.04"
  # end
  #
  # config.vm.define "vmthree" do |vmthree|
  #  vmthree.vm.box = "bento/ubuntu-16.04"
  # end  

  # @JC 04/01/18: disksize error: "* Unknown configuration section 'disksize'"
  # config.disksize.size = '25GB'

  # config.vm.hostname = "dev.cnect.to"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080
  # config.vm.network "forwarded_port", guest: 3306, host: 3306

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # AMONIS: 12/01/2018: Config for VirtualBox
  # config.vm.network "private_network", ip: "192.168.33.13"
  # AMONIS: 12/01/2018: Config for Parallels, Change to a Parallels for ip
  # config.vm.network "private_network", ip: "10.211.55.13"
  # config.vm.network "public_network", bridge: "en0", ip: "10.211.55.101"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  # AMONIS: 12/01/2018: Config for VirtualBox
  # config.vm.synced_folder "../../private", "/vagrant-private", mount_options: ["dmode=775,fmode=666"]
  # AMONIS: 12/01/2018: Config for Parallels, mount_options not supported/required in parallels
  config.vm.synced_folder "../../private", "/vagrant-private"
  config.vm.synced_folder "../../vault", "/vagrant-vault"
  config.vm.synced_folder "../shared", "/vagrant-shared"

  # Map the host machine ~/repository folder so that the VM can see and use it
  config.vm.synced_folder "../../../", "/host-repository-dir"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.

  # JCARNEY 4/6/19: Parallels is now the default VM provider (no need to run `vagrant up --provider=parallels`)
   config.vm.provider "parallels" do |prl|
    # Set the parallels tools to check for updates automatically
     prl.update_guest_tools = true

    # Set the parallels VM memory level
     prl.memory = 4096

    # Set the parallels VM cpus
     prl.cpus = 2

    # set the vm name
    # prl.name = DEV_ENV
   end

  # Example for VirtualBox:
   config.vm.provider "virtualbox" do |vb|
     vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
     # Display the VirtualBox GUI when booting the machine
     # vb.gui = true

     # Customize the amount of memory on the VM:
     vb.memory = "8096"

     # set the vm name
     # vb.name = DEV_ENV
   end


  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL

  #
  # Install and run Ansible on the guest machine (VM)
  #
  config.vm.provision "ansible_local" do |ansible|
    ansible.playbook = "playbook.yml"
    ansible.extra_vars = { ansible_python_interpreter: "/usr/bin/python3"}
    ansible.install_mode = "pip"
    ansible.limit = "all"
    ansible.vault_password_file = "/vagrant-vault/vault-password-file.txt"
    
    # @JC 1/2/19: run a specific tag by changing the name
    # run with `vagrant provision --provision-with ansible_local`
    # ansible.tags="pf_addgradleproperties"

    # Print detailed debug info
    # ansible.raw_arguments = ['-vvvvv']

    # Add extra variables to the playbook
    # ansible.extra_vars = {
    #   vagrantph: "/vagrant-ph"
    # }
  end

end
